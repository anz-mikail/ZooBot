import asyncio
import logging
import time
import datetime

from cryptography.fernet import Fernet

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import FSInputFile, LinkPreviewOptions
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from routers import router as main_router
from routers.questions_path.path import users

from config import *
from Buttons import *
from function import get_key
from animals import animals
from text import text
from answer import question_2
from logger import BotLogger




"""
1. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª answer.py,
—Ç–∞–º –±—É–¥—É—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!
2. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª text.py, 
–Ω–∞–π–¥–∏—Ç–µ –≤ –º–∞—Å—Å–∏–≤–µ –Ω—É–∂–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ù–ï –ú–ï–ù–Ø–Ø –ö–õ–Æ–ß–ê.
3. –í —Ñ–∞–π–ª–µ function.py —Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞.
4. –í —Ñ–∞–π–ª–µ review.txt  —Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
5. –í —Ñ–∞–π–ª–µ config.py —Ö—Ä–∞–Ω–∏—Ç—Å—è –¢–û–ö–ï–ù –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å –≤–æ–ø—Ä–æ—Å–æ–≤.
6. –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º —á—Ç–æ, —Å—Ö–æ–∂–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º 
–ª–µ–∂–∞—Ç –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ
- –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ routers/questions_path –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–∞–ø–∫–µ.
- –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ routers/questions_points –¥–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª–∞. 
7. –í —Ñ–∞–π–ª–µ Bot.log —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–≥–∏ 
"""


bot = Bot(token=TOKEN)
dp = Dispatcher()

dp.include_router(main_router)

logger = BotLogger(__name__)

key = Fernet.generate_key()
cipher_suite = Fernet(key)


async def encrypt_and_log_data(data):
    encrypted_data = cipher_suite.encrypt(data.encode())
    logger.info("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: %s", encrypted_data)


async def decrypt_data(encrypted_data):
    decrypted_data = cipher_suite.decrypt(encrypted_data)
    return decrypted_data.decode()


class PostState(StatesGroup):
    id = State()

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª review.txt
def CreateReview(user, review, rezult):
    time = datetime.datetime.now()
    format_time = time.strftime("%m-%d %H:%M")
    f = open('review.txt', 'a', encoding='utf8')
    f.write(f'{format_time}, {user} –æ—Ü–µ–Ω–∏–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: {review}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {rezult}\n')
    f.close()


# ID —á–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏,
# —Ç—É–¥–∞ –∂–µ —É—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞
TechnicalChat = 6620559407


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —á–∞—Ç.
async def send_TechnicalChat(message):
    await bot.send_message(TechnicalChat, message)


@dp.message(Command("help"))
async def help(message: types.Message):
    text = """–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –í–∞—à–µ –¢–û–¢–ï–ú–ù–û–ï –ñ–ò–í–û–¢–ù–û–ï.
    –í –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –∂–∏–≤–æ—Ç–Ω–æ–µ,
    —Å –∫–æ—Ç–æ—Ä—ã–º —É –í–∞—Å —Å—Ö–æ–∂–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ üêØüêªü¶äüê±üê∂üêº!
    –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start!"""
    await message.answer(text=text)


@dp.message(CommandStart())
async def welcome(message: types.Message):
    user = message.from_user
    logger.log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /start")
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å üòÉ, {user.full_name}')
    await message.answer(
        '<b>–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –í–∞—à–µ –¢–û–¢–ï–ú–ù–û–ï –ñ–ò–í–û–¢–ù–û–ï.'
        '\n –í –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –∂–∏–≤–æ—Ç–Ω–æ–µ, —Å –∫–æ—Ç–æ—Ä—ã–º —É –í–∞—Å —Å—Ö–æ–∂–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ üêØüêªü¶äüê±üê∂üêº!</b>',
        parse_mode='html')
    await message.answer('–ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É" –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.',
                         reply_markup=btn_welcome())


@dp.message(F.text.in_(text_step_end))
async def step_end(message: types.Message):
    id = message.chat.id
    if not question_2:
        users[id]['point'] = 0
    if message.text == text_step_end[0]:
        users[id]['point'] += 5
    elif message.text == text_step_end[1]:
        users[id]['point'] += 10
    elif message.text == text_step_end[2]:
        users[id]['point'] += 15
    elif message.text == text_step_end[3]:
        users[id]['point'] += 20

    points = users[id]['point']
    rezult = users[id]['code']
    links_text = (
        "https://moscowzoo.ru/about/guardianship"
        "\n"
        "t.me/Moscowzoo_official"
    )
    options_1 = LinkPreviewOptions(
        url="https://moscowzoo.ru/about/guardianship",
        prefer_large_media=True
    )
    try:
        start_time = time.time()
        text_id = get_key(text, points, rezult)
        image = get_key(animals, points, rezult)
        end_time = time.time()
        logger.log_info(f"–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–ª–∏–ª–∞—Å—å{end_time - start_time} —Å–µ–∫—É–Ω–¥")

        logger.log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} "
                        f"–∑–∞–≤–µ—Ä—à–∏–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {text_id}")
        users[id]['text'] = text_id
        users[id]['image'] = image

        start_time1 = time.time()
        image_from_pc = FSInputFile(image)
        await message.answer_photo(image_from_pc)
        await message.answer("–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!")
        await message.answer(text_id)
        end_time1 = time.time()
        logger.log_info(f"–æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ "
                        f"—Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–ª–∞—Å—å {end_time1 - start_time1} —Å–µ–∫—É–Ω–¥")

        await message.answer(
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∏—Å—á–µ–∑–∞—é—â–∏—Ö –≤–∏–¥–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö."
            "<b>\nC—Ç–∞–Ω—å—Ç–µ –æ–ø–µ–∫—É–Ω–æ–º.</b>", parse_mode='html'
        )
        await message.answer(
            f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –°—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º –Ω–∞ —Å–∞–π—Ç–µ\n{links_text}",
            link_preciew_optins=options_1,
            reply_markup=btn_step_end()
        )
    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await send_TechnicalChat("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!")


@dp.message(F.text == '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è')
async def post_1(message: types.Message, state: FSMContext):
    await state.set_state(PostState.id)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º',
    )


@dp.message(PostState.id)
async def post_2(message: types.Message, state: FSMContext):
    try:
        id = message.chat.id
        chat_id = message.text
        image_from_pc = FSInputFile(users[id]['image'])
        await bot.send_message(
            chat_id=chat_id,
            text=f"–£—á–∞—Å—Ç–Ω–∏–∫: {users[id]['name']}\n"
                 f"–¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {users[id]['text']}",
        )
        await message.bot.send_photo(
            chat_id=chat_id,
            photo=image_from_pc,
        )
        await bot.send_message(
            chat_id=chat_id,
            text=f"–£–∑–Ω–∞–π —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ \n"
                 f"–ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ó–æ–æ–ø–∞—Ä–∞–∫ \n"
                 f"–ß—Ç–æ–±—ã –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ \n"
                 f"@MoskowZoo_bot",
        )
        await message.answer(
            '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            reply_markup=btn_post()
        )
        await state.clear()
    except Exception as e:
        await message.answer(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID',
            reply_markup=btn_step_end()
        )
        await state.clear()


@dp.message(F.text.in_(['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º']))
async def statement(message: types.Message):
    try:
        id = message.chat.id
        image_from_pc = FSInputFile(users[id]['image'])

        options = LinkPreviewOptions(url="https://t.me/Mikael_Anz")
        await message.answer(
            f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ó–æ–æ–ø–∞—Ä–∫–∞",
            link_preview_options=options,
            reply_markup=btn_statement()
        )
        await send_TechnicalChat(
            f"C –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å { users[id]['name'] } \n "
                 f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"
        ),
        await send_TechnicalChat(
            users[id]['text']
        ),
        await message.bot.send_photo(
            chat_id=TechnicalChat,
            photo=image_from_pc,
        )
    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await send_TechnicalChat("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!")


@dp.message(F.text.in_(['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!']))
async def comment(message: types.Message):
    btn = [
        [
            types.InlineKeyboardButton(text='–ø–ª–æ—Ö–æ', callback_data='1'),
            types.InlineKeyboardButton(text='—Ç–∞–∫ —Å–µ–±–µ', callback_data='2')
        ],
        [
            types.InlineKeyboardButton(text='—Ö–æ—Ä–æ—à–æ', callback_data='3'),
            types.InlineKeyboardButton(text='–æ—Ç–ª–∏—á–Ω–æ', callback_data='4')
        ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=btn)
    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!",
        reply_markup=keyboard
    )


@dp.callback_query(F.data.in_(['1', '2', '3', '4']))
async def comment_callback(callback: types.CallbackQuery):
    id = callback.message.chat.id
    if callback.data == '1':
        CreateReview(users[id]['name'], '–ø–ª–æ—Ö–æ', users[id]['text'])
    elif callback.data == '2':
        CreateReview(users[id]['name'], '—Ç–∞–∫ —Å–µ–±–µ', users[id]['text'])
    elif callback.data == '3':
        CreateReview(users[id]['name'], '—Ö–æ—Ä–æ—à–æ', users[id]['text'])
    elif callback.data == '4':
        CreateReview(users[id]['name'], '–æ—Ç–ª–∏—á–Ω–æ', users[id]['text'])

    await callback.message.delete()
    await callback.message.answer('–í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç!', reply_markup=btn_comment())


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
