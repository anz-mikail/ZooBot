import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, LinkPreviewOptions

from routers import router as main_router
from routers.questions_path.path import users

from config import *
from Buttons import *
from function import get_key
from animals import animals
from text import text
from answer import question_2


"""
1. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª answer.py,
—Ç–∞–º –±—É–¥—É—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!
2. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª text.py, 
–Ω–∞–π–¥–∏—Ç–µ –≤ –º–∞—Å—Å–∏–≤–µ –Ω—É–∂–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ù–ï –ú–ï–ù–Ø–Ø –ö–õ–Æ–ß–ê. 
"""


bot = Bot(token=TOKEN)
dp = Dispatcher()

dp.include_router(main_router)

@dp.message(Command("help"))
async def help(message: types.Message):
    text = """–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –í–∞—à–µ –¢–û–¢–ï–ú–ù–û–ï –ñ–ò–í–û–¢–ù–û–ï.
    –í –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –º—ã –æ–ø—Ä–µ–¥–∏–ª–∏–º, –∂–∏–≤–æ—Ç–Ω–æ–µ,
    —Å –∫–æ—Ç–æ—Ä—ã–º —É –í–∞—Å —Å—Ö–æ–∂–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ üêØüêªü¶äüê±üê∂üêº!
    –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start!"""
    await message.answer(text=text)


@dp.message(CommandStart())
async def welcome(message: types.Message):
    user = message.from_user
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å üòÉ, {user.full_name}')
    await message.answer(
        '<b>–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –í–∞—à–µ –¢–û–¢–ï–ú–ù–û–ï –ñ–ò–í–û–¢–ù–û–ï.'
        '\n –í –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º, –∂–∏–≤–æ—Ç–Ω–æ–µ, —Å –∫–æ—Ç–æ—Ä—ã–º —É –í–∞—Å —Å—Ö–æ–∂–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ üêØüêªü¶äüê±üê∂üêº!</b>',
        parse_mode='html')
    await message.answer('–ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É" –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.',
                         reply_markup=btn_welcome())


@dp.message(F.text.in_(text_step_end))
async def step_end(message: types.Message):
    id = message.chat.id
    if not question_2:
        users[id]['point'] = 0
    if message.text == text_step_end[0]:
        users[id]['point'] += 5
    elif message.text == text_step_end[1]:
        users[id]['point'] += 10
    elif message.text == text_step_end[2]:
        users[id]['point'] += 15
    elif message.text == text_step_end[3]:
        users[id]['point'] += 20

    points = users[id]['point']
    rezult = users[id]['code']
    print('end2', users)
    links_text = (
        "https://moscowzoo.ru/about/guardianship"
        "\n"
        "t.me/Moscowzoo_official"
    )
    options_1 = LinkPreviewOptions(
        url="https://moscowzoo.ru/about/guardianship",
        prefer_large_media=True
    )

    text_id = get_key(text, points, rezult)
    image = get_key(animals, points, rezult)
    image_from_pc = FSInputFile(image)
    await message.answer_photo(image_from_pc)
    await message.answer("–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!")
    await message.answer(text_id)
    await message.answer(
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∏—Å—á–µ–∑–∞—é—â–∏—Ö –≤–∏–¥–æ–≤."
        "<b>\n C—Ç–∞–Ω—å—Ç–µ –æ–ø–µ–∫—É–Ω–æ–º.</b>", parse_mode='html'
    )
    await message.answer(
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç\n{links_text}",
        link_preciew_optins=options_1,
        reply_markup=btn_step_end()
    )


@dp.message(F.text.in_(['–ü–æ–¥–µ–ª–∏—Ç—å—Å—è']))
async def post(message: types.Message):
    pass


# @dp.message(F.text.in_(['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º']))
# async def statement(message: types.Message):
#     id = message.chat.id
#     points = users[id]['point']
#     rezult = users[id]['code']
#     text_id = get_key(text, points, rezult)
#     image = get_key(animals, points, rezult)
#     image_from_pc = FSInputFile(image)
#
#     links = ( "https://t.me/telegram")
#     options = LinkPreviewOptions(url="https://t.me/telegram")
#     await message.answer(
#         f"–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n {links}",
#         link_preview_options=options
#     )
#
#     await bot.send_message(
#         chat_id="https://t.me/telegram",
#         text=text_id
#     ),
#     await message.bot.send_photo(
#         chat_id="https://t.me/telegram",
#         photo=image_from_pc,
#     )


@dp.message(F.text.in_(['–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!']))
async def comment(message: types.Message):
    pass


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
